<#@ assembly name="UpnpServiceXml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OpenHome.Net.Xml.UpnpServiceXml" #>
<#@ template language="C#" #>
<#
    string domain = TemplateArgument("domain");
    string type = TemplateArgument("type");

    uint version = 1;

    try
    {
        version = Convert.ToUInt32(TemplateArgument("version"));
    }
    catch (FormatException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }
    catch (OverflowException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }

    string fileName = "";
    char[] charSeparators = new char[] {'.'};
    string[] res = domain.Split(charSeparators, StringSplitOptions.None);
    foreach (string str in res)
    {
        fileName += str.Substring(0, 1).ToUpper();
        if (str.Length > 1)
        {
            fileName += str.Substring(1, str.Length-1);
        }
    }
    fileName += type;
    fileName += version;
    string className = "DvProvider" + fileName;

    Initialise();

    Document u = new Document(TemplateArgument("xml"));
#>
package org.openhome.net.device.providers;

import java.util.LinkedList;
import java.util.List;

import org.openhome.net.core.*;
import org.openhome.net.device.*;

interface I<#=className#>
{
<#  foreach (Variable s in u.evented) #>
<#  { #>

    /**
     * Set the value of the <#=s.name#> property
     *
     * @param aValue    new value for the property.
     * @return      <tt>true</tt> if the value has been updated; <tt>false</tt> if <tt>aValue</tt> was the same as the previous value.
     *
     */
    public boolean setProperty<#=s.name#>(<#=argtype[s.type]#> aValue);

    /**
     * Get a copy of the value of the <#=s.name#> property
     *
     * @return value of the <#=s.name#> property.
     */
    public <#=argtype[s.type]#> getProperty<#=s.name#>();
<#  } #>        
}

/**
 * Provider for the <#=domain#>:<#=type#>:<#=version#> UPnP service.
 */
public class <#=className#> extends DvProvider implements I<#=className#>
{
<#  Dictionary<string,string> outParams = new Dictionary<string,string>(); #>
<#  foreach (Method a in u.methods) #>
<#  { #>
<#      if (a.outargs.Count >= 2) #>
<#      { #>
<#          if (!outParams.ContainsKey(a.name)) #>
<#          { #>

    public class <#=a.name#>
    {
<#              foreach (Argument o in a.outargs) #>
<#              { #>
        private <#=argtype[o.variable.type]#> i<#=ArgName(o)#>;
<#              } #>

        public <#=a.name#>(
<#              int i = 0; #>
<#              foreach (Argument o in a.outargs) #>
<#              { #>
            <#=argtype[o.variable.type]#> a<#=ArgName(o)#><#=(i < a.outargs.Count-1 ? "," : "")#>
<#                  i++; #>
<#              } #>
        )
        {
<#              foreach (Argument o in a.outargs) #>
<#              { #>
            i<#=ArgName(o)#> = a<#=ArgName(o)#>;
<#              } #>
        }
<#              foreach (Argument o in a.outargs) #>
<#              { #>
        public <#=argtype[o.variable.type]#> get<#=ArgName(o)#>()
        {
            return i<#=ArgName(o)#>;
        }
<#              } #>
    }
<#               outParams.Add(a.name, a.name); #>
<#          } #>
<#      } #>
<#  } #>

<#  foreach (Method a in u.methods) #>
<#  { #>
    private IDvInvocationListener iDelegate<#=a.name#>;
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
    private <#=propertyType[s.type]#> iProperty<#=s.name#>;
<#  } #>

    /**
     * Constructor
     *
     * @param aDevice   device which owns this provider.
     */
    protected <#=className#>(DvDevice aDevice)
    {
        super(aDevice, "<#=domain#>", "<#=type#>", <#=version#>);
    }
<#  foreach (Variable s in u.evented) #>
<#  { #>

    /**
     * Enable the <#=s.name#> property.
     */
    public void enableProperty<#=s.name#>()
    {
<#      if (s.type == "string") #>
<#      { #>
        List<String> allowedValues = new LinkedList<String>();
<#      } #>
<#      if (s.values.Count > 0) #>
<#      { #>
<#      foreach (string val in s.values) #>
<#          { #>
        allowedValues.add("<#=val#>");
<#          } #>
<#      } #>
        iProperty<#=s.name#> = new <#=propertyType[s.type]#>(new <#=paramType[s.type]#>("<#=s.name#>"<#=ParameterAllowedValues(s)#>));
        addProperty(iProperty<#=s.name#>);
<#      if (s.values.Count > 0) #>
<#      { #>
            allowedValues.clear();
<#      } #>
    }
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>

    /**
     * Set the value of the <#=s.name#> property
     *
     * @param aValue    new value for the property.
     * @return <tt>true</tt> if the value has been updated; <tt>false</tt>
     * if <tt>aValue</tt> was the same as the previous value.
     */
    public boolean setProperty<#=s.name#>(<#=argtype[s.type]#> aValue)
    {
        return <#=propertySetter[s.type]#>(iProperty<#=s.name#>, aValue);
    }

    /**
     * Get a copy of the value of the <#=s.name#> property
     *
     * @return  value of the <#=s.name#> property.
     */
    public <#=argtype[s.type]#> getProperty<#=s.name#>()
    {
        return iProperty<#=s.name#>.getValue();
    }
<#  } #>
<#  foreach (Method a in u.methods) #>
<#  { #>

    /**
     * Signal that the action <#=a.name#> is supported.
     *
     * <p>The action's availability will be published in the device's service.xml.
     * <#=a.name#> must be overridden if this is called.
     */      
    protected void enableAction<#=a.name#>()
    {
        Action action = new Action("<#=a.name#>");<#=DeclareAllowedValuesForMethod(a)#>
<#      foreach (Argument i in a.inargs) #>
<#      { #>
<#          if (RelatedVariableIsEvented(i, u)) #>
<#          { #>
        action.addInputParameter(new ParameterRelated("<#=i.name#>", iProperty<#=i.variable.name#>));
<#          } #>
<#          else #>
<#          { #>
<#              if (i.variable.values.Count > 0) #>
<#              { #>
<#                  foreach (string val in i.variable.values) #>
<#                  { #>
        allowedValues.add("<#=val#>");
<#                  } #>
<#              } #>
        action.addInputParameter(new <#=paramType[i.variable.type]#>("<#=i.name#>"<#=ParameterAllowedValues(i.variable)#>));
<#              if (i.variable.values.Count > 0) #>
<#              { #>
        allowedValues.clear();
<#              } #>
<#          } #>
<#      } #>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
<#          if (RelatedVariableIsEvented(o, u)) #>
<#          { #>
        action.addOutputParameter(new ParameterRelated("<#=o.name#>", iProperty<#=o.variable.name#>));
<#          } #>
<#          else #>
<#          { #>
<#              if (o.variable.values.Count > 0) #>
<#              { #>
<#                  foreach (string val in o.variable.values) #>
<#                  { #>
        allowedValues.add("<#=val#>");
<#                  } #>
<#              } #>
        action.addOutputParameter(new <#=paramType[o.variable.type]#>("<#=o.name#>"<#=ParameterAllowedValues(o.variable)#>));
<#              if (o.variable.values.Count > 0) #>
<#              { #>
        allowedValues.clear();
<#              } #>
<#          } #>
<#      } #>
        iDelegate<#=a.name#> = new Do<#=a.name#>();
        enableAction(action, iDelegate<#=a.name#>);
    }
<#  } #>
<#  foreach (Method a in u.methods) #>
<#  { #>

    /**
     * <#=a.name#> action.
     *
     * <p>Will be called when the device stack receives an invocation of the
     * <#=a.name#> action for the owning device.
     *
     * <p>Must be implemented iff {@link #enableAction<#=a.name#>} was called.</remarks>
     *
     * @param aInvocation   Interface allowing querying of aspects of this particular action invocation.</param>
<#      foreach (Argument i in a.inargs) #>
<#      { #>
     * @param a<#=i.name#>
<#      } #>
     */
    protected <#=ReturnType(a)#> <#=ArgNameLocal(a.name)#>(IDvInvocation aInvocation<#=ArgsFull(a)#>)
    {
        throw (new ActionDisabledError());
    }
<#  } #>

    /**
     * Must be called for each class instance.  Must be called before Core.Library.Close().
     */
    public void dispose()
    {
        synchronized (this)
        {
            if (iHandle == 0)
            {
                return;
            }
            super.dispose();
            iHandle = 0;
        }
    }

<#  foreach (Method a in u.methods) #>
<#  { #>

    private class Do<#=a.name#> implements IDvInvocationListener
    {
        public void actionInvoked(long aInvocation)
        {
            DvInvocation invocation = new DvInvocation(aInvocation);
<#      foreach (Argument i in a.inargs) #>
<#      { #>
            <#=argtype[i.variable.type]#> <#=ArgNameLocal(i.name)#>;
<#      } #>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
            <#=argtype[o.variable.type]#> <#=ArgNameLocal(o.name)#>;
<#      } #>
            try
            {
                invocation.readStart();
<#      foreach (Argument i in a.inargs) #>
<#      { #>
                <#=ArgNameLocal(i.name)#> = invocation.<#=invocationReader[i.variable.type]#>("<#=i.name#>");
<#      } #>
                invocation.readEnd();
<#      if (a.outargs.Count == 1)#>
<#      { #>
 <#               foreach (Argument o in a.outargs) #>
<#          { #>
                <#=ArgNameLocal(o.name)#> = <#=ArgNameLocal(a.name)#>(invocation<#=ArgNames(a)#>);
<#          } #>
<#      } #>
<#      else if (a.outargs.Count >= 2) #>
<#      { #>

<#          string outType = ReturnType(a); #>
            <#=outType#> outArgs = <#=ArgNameLocal(a.name)#>(invocation<#=ArgNames(a)#>);
<#          foreach (Argument o in a.outargs) #>
<#          { #>
            <#=ArgNameLocal(o.name)#> = outArgs.get<#=ArgName(o)#>();
<#          } #>
<#      } #>
<#      else #>
<#      { #>
                <#=ArgNameLocal(a.name)#>(invocation<#=ArgNames(a)#>);
<#      } #>
            }
            catch (ActionError ae)
            {
                invocation.reportActionError(ae, "<#=a.name#>");
                return;
            }
            catch (PropertyUpdateError pue)
            {
                invocation.reportError(501, "Invalid XML");
                return;
            }
            catch (Exception e)
            {
                System.out.println("WARNING: unexpected exception: " + e.getMessage());
                System.out.println("         Only ActionError or PropertyUpdateError can be thrown by actions");
                e.printStackTrace();
                return;
            }
            try
            {
                invocation.writeStart();
<#      foreach (Argument o in a.outargs) #>
<#      { #>
                invocation.<#=invocationWriter[o.variable.type]#>("<#=o.name#>", <#=ArgNameLocal(o.name)#>);
<#      } #>
                invocation.writeEnd();
            }
            catch (ActionError ae)
            {
                return;
            }
            catch (Exception e)
            {
                System.out.println("ERROR: unexpected exception: " + e.getMessage());
                System.out.println("       Only ActionError can be thrown by action response writer");
                e.printStackTrace();
            }
        }
    }
<#  } #>
}

<#+

Dictionary<string,string> argtype = new Dictionary<string,string>();
Dictionary<string,string> paramType = new Dictionary<string,string>();
Dictionary<string,string> propertyType = new Dictionary<string,string>();
Dictionary<string,string> propertySetter = new Dictionary<string,string>();
Dictionary<string,string> invocationReader = new Dictionary<string,string>();
Dictionary<string,string> invocationWriter = new Dictionary<string,string>();

void Initialise()
{
    argtype.Add("ui1", "long");
    argtype.Add("ui2", "long");
    argtype.Add("ui4", "long");
    argtype.Add("boolean", "boolean");
    argtype.Add("i1", "int");
    argtype.Add("i2", "int");
    argtype.Add("i4", "int");
    argtype.Add("string", "String");
    argtype.Add("bin.base64", "byte[]");
    argtype.Add("uri", "String");

    paramType.Add("ui1", "ParameterUint");
    paramType.Add("ui2", "ParameterUint");
    paramType.Add("ui4", "ParameterUint");
    paramType.Add("boolean", "ParameterBool");
    paramType.Add("i1", "ParameterInt");
    paramType.Add("i2", "ParameterInt");
    paramType.Add("i4", "ParameterInt");
    paramType.Add("string", "ParameterString");
    paramType.Add("bin.base64", "ParameterBinary");
    paramType.Add("uri", "ParameterString");

    propertyType.Add("ui1", "PropertyUint");
    propertyType.Add("ui2", "PropertyUint");
    propertyType.Add("ui4", "PropertyUint");
    propertyType.Add("boolean", "PropertyBool");
    propertyType.Add("i1", "PropertyInt");
    propertyType.Add("i2", "PropertyInt");
    propertyType.Add("i4", "PropertyInt");
    propertyType.Add("string", "PropertyString");
    propertyType.Add("bin.base64", "PropertyBinary");
    propertyType.Add("uri", "PropertyString");

    propertySetter.Add("ui1", "setPropertyUint");
    propertySetter.Add("ui2", "setPropertyUint");
    propertySetter.Add("ui4", "setPropertyUint");
    propertySetter.Add("boolean", "setPropertyBool");
    propertySetter.Add("i1", "setPropertyInt");
    propertySetter.Add("i2", "setPropertyInt");
    propertySetter.Add("i4", "setPropertyInt");
    propertySetter.Add("string", "setPropertyString");
    propertySetter.Add("bin.base64", "setPropertyBinary");
    propertySetter.Add("uri", "setPropertyString");

    invocationReader.Add("ui1", "readUint");
    invocationReader.Add("ui2", "readUint");
    invocationReader.Add("ui4", "readUint");
    invocationReader.Add("boolean", "readBool");
    invocationReader.Add("i1", "readInt");
    invocationReader.Add("i2", "readInt");
    invocationReader.Add("i4", "readInt");
    invocationReader.Add("string", "readString");
    invocationReader.Add("bin.base64", "readBinary");
    invocationReader.Add("uri", "readString");

    invocationWriter.Add("ui1", "writeUint");
    invocationWriter.Add("ui2", "writeUint");
    invocationWriter.Add("ui4", "writeUint");
    invocationWriter.Add("boolean", "writeBool");
    invocationWriter.Add("i1", "writeInt");
    invocationWriter.Add("i2", "writeInt");
    invocationWriter.Add("i4", "writeInt");
    invocationWriter.Add("string", "writeString");
    invocationWriter.Add("bin.base64", "writeBinary");
    invocationWriter.Add("uri", "writeString");
}

string DeclareAllowedValues()
{
    return "        List<String> allowedValues = new LinkedList<String>();";
}

string DeclareAllowedValuesForMethod(Method a)
{
    foreach (Argument i in a.inargs)
    {
        if (!i.variable.evented && (i.variable.type == "string" || i.variable.type == "uri"))
        {
            return DeclareAllowedValues();
        }
    }
    foreach (Argument o in a.outargs)
    {
        if (!o.variable.evented && (o.variable.type == "string" || o.variable.type == "uri"))
        {
            return DeclareAllowedValues();
        }
    }
    return "";
}

string ParameterAllowedValues(Variable v)
{
    string result = "";
    if (v.type == "string" || v.type == "uri")
    {
        result += ", allowedValues";
    }
    else if (v.minspecified)
    {
        result += ", ";
        result += v.min;
        if (v.maxspecified)
        {
            result += ", ";
            result += v.max;
        }
        else
        {
            result += ", ";
            result += Int32.MaxValue;
        }
        if (v.stepspecified)
        {
            result += ", ";
            result += v.step;
        }
    }
    return(result);
}

string InArgsFull(Method a)
{
    string result = "";
    
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += argtype[i.variable.type];
        result += " ";
        result += "a" + i.name;
    }
    
    return result;
} 

string OutArgsFull(Method a)
{
    string result = "";
    
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += "out ";
        result += argtype[o.variable.type];
        result += " ";
        result += "a" + o.name;
    }
    
    return result;
}

string ArgsFull(Method a)
{
    string result = InArgsFull(a);
    if (result.Length > 0)
    {
        result = ", " + result;
    }
    return result;
}

string ArgNameLocal(string aName)
{
    string name = aName.Substring(0, 1).ToLower();
    if (aName.Length > 1)
    {
        name += aName.Substring(1, aName.Length-1);
    }
    return name;
}

string ArgNames(Method a)
{
    string result = "";
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += ArgNameLocal(i.name);
    }
    if (result.Length > 0)
    {
        result = ", " + result;
    }
    return result;
}

string ArgName(Argument aArg)
{
    string name = aArg.name;
    if (name.Substring(0, 1) == "a")
    {
        name = name.Substring(1);
    }
    string start = name.Substring(0, 1);
    string end = name.Substring(1);
    string ret = start.ToUpper() + end;
    return ret;
}

bool RelatedVariableIsEvented(Argument arg, Document u)
{
    foreach (Variable v in u.evented)
    {
        if (v.name == arg.related)
        {
            return true;
        }
    }
    return false;
}

string TemplateArgument(string aName)
{
    string[] args =  System.Environment.GetCommandLineArgs();
        
    bool isarg = false;
    
    foreach (string arg in args)
    {
        if (isarg)
        {
            string[] parts = arg.Split(new char[] {':'});
            
            if (parts.Length == 2)
            {
                if (parts[0] == aName)
                {
                    return (parts[1]);
                }
            }
            
            isarg = false;
            continue;
        }
        
        if (arg == "-a")
        {
            isarg = true;
        }
    }
    
    throw (new ArgumentException(aName + " not specified"));
}

string ReturnType(Method aMethod)
{
    string outType = "";

    if (aMethod.outargs.Count >= 2)
    {
        outType = aMethod.name;
    } 
    else if (aMethod.outargs.Count == 1)
    {
        foreach (Argument o in aMethod.outargs)
        {
            outType = argtype[o.variable.type];
        }
    }
    else
    {
        outType = "void";
    }
    
    return outType;
}
#>
