<#@ assembly name="UpnpServiceXml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OpenHome.Net.Xml.UpnpServiceXml" #>
<#@ template language="C#" #>
<#
    string domain = TemplateArgument("domain");
    string type = TemplateArgument("type");

    uint version = 1;

    try
    {
       version = Convert.ToUInt32(TemplateArgument("version"));
    }
    catch (FormatException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }
    catch (OverflowException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }

    string fileName = "";
    char[] charSeparators = new char[] {'.'};
    string[] res = domain.Split(charSeparators, StringSplitOptions.None);
    foreach (string str in res)
    {
        fileName += str.Substring(0, 1).ToUpper();
        if (str.Length > 1)
        {
            fileName += str.Substring(1, str.Length-1);
        }
    }
    fileName += type;
    fileName += version;
    string className = "DvProvider" + fileName;
    string callbackPrefix = "Callback" + type + version;

    Initialise();

    Document u = new Document(TemplateArgument("xml"));
#>
#include "Dv<#=fileName#>.h"
#include <OpenHome/OhNetTypes.h>
#include <OpenHome/Buffer.h>
#include <OpenHome/Net/C/DviDeviceC.h>
#include <OpenHome/Net/Core/DvProvider.h>
#include <OpenHome/Net/C/OhNet.h>
#include <OpenHome/OhNetTypes.h>
#include <OpenHome/Net/Core/DvInvocationResponse.h>
#include <OpenHome/Net/Private/Service.h>
#include <OpenHome/Net/Private/FunctorDviInvocation.h>
#include <OpenHome/Net/C/DvInvocation.h>
#include <OpenHome/Net/C/DvInvocationPrivate.h>
#include <OpenHome/Net/Private/DviStack.h>

using namespace OpenHome;
using namespace OpenHome::Net;

class <#=className#>C : public DvProvider
{
public:
    <#=className#>C(DvDeviceC aDevice);
<#  foreach (Variable s in u.evented) #>
<#  { #>
    TBool SetProperty<#=s.name#>(<#=inArgParamType[s.type]#> aValue);
    void GetProperty<#=s.name#>(<#=outArgTypeProperty[s.type]#> aValue);
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
    void EnableProperty<#=s.name#>();
<#  } #>
<#  foreach (Method a in u.methods) #>
<#  { #>
    void EnableAction<#=a.name#>(<#=callbackPrefix#><#=a.name#> aCallback, void* aPtr);
<#  } #>
private:
<#  foreach (Method a in u.methods) #>
<#  { #>
    void Do<#=a.name#>(IDviInvocation& aInvocation);
<#  } #>
private:
<#  foreach (Method a in u.methods) #>
<#  { #>
    <#=callbackPrefix#><#=a.name#> iCallback<#=a.name#>;
    void* iPtr<#=a.name#>;
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
    <#=propertyType[s.type]#>* iProperty<#=s.name#>;
<#  } #>
};

<#=className#>C::<#=className#>C(DvDeviceC aDevice)
    : DvProvider(DviDeviceC::DeviceFromHandle(aDevice)->Device(), "<#=domain#>", "<#=type#>", <#=version#>)
{
<#  foreach (Variable s in u.evented) #>
<#  { #>
    iProperty<#=s.name#> = NULL;
<#  } #>
}
<#  foreach (Variable s in u.evented) #>
<#  { #>

TBool <#=className#>C::SetProperty<#=s.name#>(<#=inArgParamType[s.type]#> aValue)
{
    ASSERT(iProperty<#=s.name#> != NULL);
    return <#=propertySetter[s.type]#>(*iProperty<#=s.name#>, aValue);
}

void <#=className#>C::GetProperty<#=s.name#>(<#=outArgTypeProperty[s.type]#> aValue)
{
    ASSERT(iProperty<#=s.name#> != NULL);
<#      if (s.type == "string" || s.type == "bin.base64" || s.type == "uri") #>
<#      { #>
    aValue.Set(iProperty<#=s.name#>->Value());
<#      } #>
<#      else #>
<#      { #>
    aValue = iProperty<#=s.name#>->Value();
<#      } #>
}
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>

void <#=className#>C::EnableProperty<#=s.name#>()
{
<#      if (s.values.Count > 0) #>
<#      { #>
    TChar** allowedValues;
    TUint index = 0;
    allowedValues = new TChar*[<#=s.values.Count#>];
<#          foreach (string val in s.values) #>
<#          { #>
    allowedValues[index++] = (TChar*)"<#=val#>";
<#          } #>
<#      } #>
    iProperty<#=s.name#> = new <#=propertyType[s.type]#>(iDvStack.Env(), new <#=paramType[s.type]#>("<#=s.name#>"<#=ParameterAllowedValues(s)#>));
<#      if (s.values.Count > 0) #>
<#      { #>
    delete[] allowedValues;
<#      } #>
    iService->AddProperty(iProperty<#=s.name#>); // passes ownership
}
<#  } #>
<#  foreach (Method a in u.methods) #>
<#  { #>

void <#=className#>C::EnableAction<#=a.name#>(<#=callbackPrefix#><#=a.name#> aCallback, void* aPtr)
{
    iCallback<#=a.name#> = aCallback;
    iPtr<#=a.name#> = aPtr;
    OpenHome::Net::Action* action = new OpenHome::Net::Action("<#=a.name#>");<#=DeclareAllowedValuesForMethod(a)#>
<#      foreach (Argument i in a.inargs) #>
<#      { #>
<#          if (RelatedVariableIsEvented(i, u)) #>
<#          { #>
    action->AddInputParameter(new ParameterRelated("<#=i.name#>", *iProperty<#=i.variable.name#>));
<#          } #>
<#          else #>
<#          { #>
<#              if (i.variable.values.Count > 0) #>
<#              { #>
    index = 0;
    allowedValues = new TChar*[<#=i.variable.values.Count#>];
<#                  foreach (string val in i.variable.values) #>
<#                  { #>
    allowedValues[index++] = (TChar*)"<#=val#>";
<#                  } #>
<#              } #>
    action->AddInputParameter(new <#=paramType[i.variable.type]#>("<#=i.name#>"<#=ParameterAllowedValues(i.variable)#>));
<#              if (i.variable.values.Count > 0) #>
<#              { #>
    delete[] allowedValues;
<#              } #>
<#          } #>
<#      } #>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
<#          if (RelatedVariableIsEvented(o, u)) #>
<#          { #>
    action->AddOutputParameter(new ParameterRelated("<#=o.name#>", *iProperty<#=o.variable.name#>));
<#          } #>
<#          else #>
<#          { #>
<#              if (o.variable.values.Count > 0) #>
<#              { #>
    index = 0;
    allowedValues = new TChar*[<#=o.variable.values.Count#>];
<#                  foreach (string val in o.variable.values) #>
<#                  { #>
    allowedValues[index++] = (TChar*)"<#=val#>";
<#                  } #>
<#              } #>
    action->AddOutputParameter(new <#=paramType[o.variable.type]#>("<#=o.name#>"<#=ParameterAllowedValues(o.variable)#>));
<#              if (o.variable.values.Count > 0) #>
<#              { #>
    delete[] allowedValues;
<#              } #>
<#          } #>
<#      } #>
    FunctorDviInvocation functor = MakeFunctorDviInvocation(*this, &<#=className#>C::Do<#=a.name#>);
    iService->AddAction(action, functor);
}
<#  } #>
<#  foreach (Method a in u.methods) #>
<#  { #>

void <#=className#>C::Do<#=a.name#>(IDviInvocation& aInvocation)
{
    DvInvocationCPrivate invocationWrapper(aInvocation);
    IDvInvocationC* invocationC;
    void* invocationCPtr;
    invocationWrapper.GetInvocationC(&invocationC, &invocationCPtr);
    aInvocation.InvocationReadStart();
<#      foreach (Argument i in a.inargs) #>
<#      { #>
<#          if (i.variable.type=="string" || i.variable.type=="bin.base64" || i.variable.type=="uri") #>
<#          { #>
    <#=inArgType[i.variable.type]#> <#=i.name#>;
    aInvocation.<#=invReadType[i.variable.type]#>("<#=i.name#>", <#=i.name#>);
<#          } #>
<#          else #>
<#          { #>
    <#=inArgType[i.variable.type]#> <#=i.name#> = aInvocation.<#=invReadType[i.variable.type]#>("<#=i.name#>");
<#          } #>
<#      } #>
    aInvocation.InvocationReadEnd();
    DviInvocation invocation(aInvocation);
<#      foreach (Argument o in a.outargs) #>
<#      { #>
<#          if (o.variable.type=="bin.base64") #>
<#          { #>
    char* <#=o.name#>;
    uint32_t <#=o.name#>Len;
<#          } #>
<#          else if (o.variable.type=="string" || o.variable.type=="uri") #>
<#          { #>
    char* <#=o.name#>;
<#          } #>
<#          else if (o.variable.type=="boolean") #>
<#          { #>
    uint32_t <#=o.name#>;
<#          } #>
<#          else #>
<#          { #>
    <#=outArgType[o.variable.type]#> <#=o.name#>;
<#          } #>
<#      } #>
    ASSERT(iCallback<#=a.name#> != NULL);
    if (0 != iCallback<#=a.name#>(iPtr<#=a.name#>, invocationC, invocationCPtr<#=CallbackArgs(a)#>)) {
        invocation.Error(502, Brn("Action failed"));
        return;
    }
<#      foreach (Argument o in a.outargs) #>
<#      { #>
    <#=invRespType[o.variable.type]#> resp<#=o.name#>(aInvocation, "<#=o.name#>");
<#      } #>
    invocation.StartResponse();
<#      foreach (Argument o in a.outargs) #>
<#      { #>
<#          if (o.variable.type=="bin.base64") #>
<#          { #>
    Brh buf<#=o.name#>;
    buf<#=o.name#>.Set((const TByte*)<#=o.name#>, <#=o.name#>Len);
    OhNetFreeExternal(<#=o.name#>);
    resp<#=o.name#>.Write(buf<#=o.name#>);
    resp<#=o.name#>.WriteFlush();
<#          } #>
<#          else if (o.variable.type=="string" || o.variable.type=="uri") #>
<#          { #>
    Brhz buf<#=o.name#>((const TChar*)<#=o.name#>);
    OhNetFreeExternal(<#=o.name#>);
    resp<#=o.name#>.Write(buf<#=o.name#>);
    resp<#=o.name#>.WriteFlush();
<#          } #>
<#          else if (o.variable.type=="boolean") #>
<#          { #>
    resp<#=o.name#>.Write((<#=o.name#>!=0));
<#          } #>
<#          else #>
<#          { #>
    resp<#=o.name#>.Write(<#=o.name#>);
<#          } #>
<#      } #>
    invocation.EndResponse();
}
<#  } #>



THandle STDCALL <#=className#>Create(DvDeviceC aDevice)
{
    return new <#=className#>C(aDevice);
}

void STDCALL <#=className#>Destroy(THandle aProvider)
{
    delete reinterpret_cast<<#=className#>C*>(aProvider);
}
<#  foreach (Method a in u.methods) #>
<#  { #>

void STDCALL <#=className#>EnableAction<#=a.name#>(THandle aProvider, <#=callbackPrefix#><#=a.name#> aCallback, void* aPtr)
{
    reinterpret_cast<<#=className#>C*>(aProvider)->EnableAction<#=a.name#>(aCallback, aPtr);
}
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>

int32_t STDCALL <#=className#>SetProperty<#=s.name#>(THandle aProvider, <#=PropertyInArgs(s)#>, uint32_t* aChanged)
{
<#      if (s.type=="bin.base64") #>
<#      { #>
    Brh buf;
    buf.Set((const TByte*)aValue, aValueLen);
    *aChanged = (reinterpret_cast<<#=className#>C*>(aProvider)->SetProperty<#=s.name#>(buf)? 1 : 0);
<#      } #>
<#      else if (s.type=="string" || s.type=="uri") #>
<#      { #>
    Brhz buf(aValue);
    *aChanged = (reinterpret_cast<<#=className#>C*>(aProvider)->SetProperty<#=s.name#>(buf)? 1 : 0);
<#      } #>
<#      else if (s.type=="boolean") #>
<#      { #>
    *aChanged = (reinterpret_cast<<#=className#>C*>(aProvider)->SetProperty<#=s.name#>((aValue!=0))? 1 : 0);
<#      } #>
<#      else #>
<#      { #>
    *aChanged = (reinterpret_cast<<#=className#>C*>(aProvider)->SetProperty<#=s.name#>(aValue)? 1 : 0);
<#      } #>
    return 0;
}

void STDCALL <#=className#>GetProperty<#=s.name#>(THandle aProvider, <#=PropertyOutArgs(s)#>)
{
<#      if (s.type=="bin.base64") #>
<#      { #>
    Brh buf;
    reinterpret_cast<<#=className#>C*>(aProvider)->GetProperty<#=s.name#>(buf);
    *aValueLen = buf.Bytes();
    *aValue = (char*)buf.Extract();
<#      } #>
<#      else if (s.type=="string" || s.type=="uri") #>
<#      { #>
    Brhz buf;
    reinterpret_cast<<#=className#>C*>(aProvider)->GetProperty<#=s.name#>(buf);
    *aValue = (char*)buf.Transfer();
<#      } #>
<#      else if (s.type=="boolean") #>
<#      { #>
    TBool val;
    reinterpret_cast<<#=className#>C*>(aProvider)->GetProperty<#=s.name#>(val);
    *aValue = (val? 1 : 0);
<#      } #>
<#      else if (s.type=="i1" || s.type=="i2" || s.type=="i4") #>
<#      { #>
    int32_t val;
    reinterpret_cast<<#=className#>C*>(aProvider)->GetProperty<#=s.name#>(val);
    *aValue = val;
<#      } #>
<#      else #>
<#      { #>
    uint32_t val;
    reinterpret_cast<<#=className#>C*>(aProvider)->GetProperty<#=s.name#>(val);
    *aValue = val;
<#      } #>
}
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>

void STDCALL <#=className#>EnableProperty<#=s.name#>(THandle aProvider)
{
    reinterpret_cast<<#=className#>C*>(aProvider)->EnableProperty<#=s.name#>();
}
<#  } #>

<#+
Dictionary<string,string> inArgType = new Dictionary<string,string>();
Dictionary<string,string> inArgParamType = new Dictionary<string,string>();
Dictionary<string,string> outArgType = new Dictionary<string,string>();
Dictionary<string,string> propInArgType = new Dictionary<string,string>();
Dictionary<string,string> invReadType = new Dictionary<string,string>();
Dictionary<string,string> invRespType = new Dictionary<string,string>();
Dictionary<string,string> invRespParamType = new Dictionary<string,string>();
Dictionary<string,string> outArgTypeProperty = new Dictionary<string,string>();
Dictionary<string,string> paramType = new Dictionary<string,string>();
Dictionary<string,string> propertyType = new Dictionary<string,string>();
Dictionary<string,string> propertySetter = new Dictionary<string,string>();

void Initialise()
{
    inArgType.Add("string", "Brhz");
    inArgType.Add("ui1", "TUint");
    inArgType.Add("ui2", "TUint");
    inArgType.Add("ui4", "TUint");
    inArgType.Add("boolean", "TBool");
    inArgType.Add("i1", "TInt");
    inArgType.Add("i2", "TInt");
    inArgType.Add("i4", "TInt");
    inArgType.Add("bin.base64", "Brh");
    inArgType.Add("uri", "Brhz");

    inArgParamType.Add("string", "const Brx&");
    inArgParamType.Add("ui1", "TUint");
    inArgParamType.Add("ui2", "TUint");
    inArgParamType.Add("ui4", "TUint");
    inArgParamType.Add("boolean", "TBool");
    inArgParamType.Add("i1", "TInt");
    inArgParamType.Add("i2", "TInt");
    inArgParamType.Add("i4", "TInt");
    inArgParamType.Add("bin.base64", "const Brx&");
    inArgParamType.Add("uri", "const Brx&");

    outArgType.Add("string", "char*");
    outArgType.Add("ui1", "uint32_t");
    outArgType.Add("ui2", "uint32_t");
    outArgType.Add("ui4", "uint32_t");
    outArgType.Add("boolean", "uint32_t");
    outArgType.Add("i1", "int32_t");
    outArgType.Add("i2", "int32_t");
    outArgType.Add("i4", "int32_t");
    outArgType.Add("bin.base64", "char*");
    outArgType.Add("uri", "char*");

    propInArgType.Add("string", "const char*");
    propInArgType.Add("ui1", "uint32_t");
    propInArgType.Add("ui2", "uint32_t");
    propInArgType.Add("ui4", "uint32_t");
    propInArgType.Add("boolean", "uint32_t");
    propInArgType.Add("i1", "int32_t");
    propInArgType.Add("i2", "int32_t");
    propInArgType.Add("i4", "int32_t");
    propInArgType.Add("bin.base64", "const char*");
    propInArgType.Add("uri", "const char*");

    invReadType.Add("string", "InvocationReadString");
    invReadType.Add("ui1", "InvocationReadUint");
    invReadType.Add("ui2", "InvocationReadUint");
    invReadType.Add("ui4", "InvocationReadUint");
    invReadType.Add("boolean", "InvocationReadBool");
    invReadType.Add("i1", "InvocationReadInt");
    invReadType.Add("i2", "InvocationReadInt");
    invReadType.Add("i4", "InvocationReadInt");
    invReadType.Add("bin.base64", "InvocationReadBinary");
    invReadType.Add("uri", "InvocationReadString");

    invRespType.Add("string", "DviInvocationResponseString");
    invRespType.Add("ui1", "DviInvocationResponseUint");
    invRespType.Add("ui2", "DviInvocationResponseUint");
    invRespType.Add("ui4", "DviInvocationResponseUint");
    invRespType.Add("boolean", "DviInvocationResponseBool");
    invRespType.Add("i1", "DviInvocationResponseInt");
    invRespType.Add("i2", "DviInvocationResponseInt");
    invRespType.Add("i4", "DviInvocationResponseInt");
    invRespType.Add("bin.base64", "DviInvocationResponseBinary");
    invRespType.Add("uri", "DviInvocationResponseString");

    invRespParamType.Add("string", "IInvocationResponseString");
    invRespParamType.Add("ui1", "IInvocationResponseUint");
    invRespParamType.Add("ui2", "IInvocationResponseUint");
    invRespParamType.Add("ui4", "IInvocationResponseUint");
    invRespParamType.Add("boolean", "IInvocationResponseBool");
    invRespParamType.Add("i1", "IInvocationResponseInt");
    invRespParamType.Add("i2", "IInvocationResponseInt");
    invRespParamType.Add("i4", "IInvocationResponseInt");
    invRespParamType.Add("bin.base64", "IInvocationResponseBinary");
    invRespParamType.Add("uri", "IInvocationResponseString");

    outArgTypeProperty.Add("ui1", "TUint&");
    outArgTypeProperty.Add("ui2", "TUint&");
    outArgTypeProperty.Add("ui4", "TUint&");
    outArgTypeProperty.Add("boolean", "TBool&");
    outArgTypeProperty.Add("i1", "TInt&");
    outArgTypeProperty.Add("i2", "TInt&");
    outArgTypeProperty.Add("i4", "TInt&");
    outArgTypeProperty.Add("string", "Brhz&");
    outArgTypeProperty.Add("bin.base64", "Brh&");
    outArgTypeProperty.Add("uri", "Brhz&");

    paramType.Add("string", "ParameterString");
    paramType.Add("ui1", "ParameterUint");
    paramType.Add("ui2", "ParameterUint");
    paramType.Add("ui4", "ParameterUint");
    paramType.Add("boolean", "ParameterBool");
    paramType.Add("i1", "ParameterInt");
    paramType.Add("i2", "ParameterInt");
    paramType.Add("i4", "ParameterInt");
    paramType.Add("bin.base64", "ParameterBinary");
    paramType.Add("uri", "ParameterString");

    propertyType.Add("ui1", "PropertyUint");
    propertyType.Add("ui2", "PropertyUint");
    propertyType.Add("ui4", "PropertyUint");
    propertyType.Add("boolean", "PropertyBool");
    propertyType.Add("i1", "PropertyInt");
    propertyType.Add("i2", "PropertyInt");
    propertyType.Add("i4", "PropertyInt");
    propertyType.Add("string", "PropertyString");
    propertyType.Add("bin.base64", "PropertyBinary");
    propertyType.Add("uri", "PropertyString");

    propertySetter.Add("string", "SetPropertyString");
    propertySetter.Add("ui1", "SetPropertyUint");
    propertySetter.Add("ui2", "SetPropertyUint");
    propertySetter.Add("ui4", "SetPropertyUint");
    propertySetter.Add("boolean", "SetPropertyBool");
    propertySetter.Add("i1", "SetPropertyInt");
    propertySetter.Add("i2", "SetPropertyInt");
    propertySetter.Add("i4", "SetPropertyInt");
    propertySetter.Add("bin.base64", "SetPropertyBinary");
    propertySetter.Add("uri", "SetPropertyString");
}

string ActionArgs(Method a)
{
    string result = "";
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += inArgType[i.variable.type];
        result += " ";
        result += "a" + i.name;
    }
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += invRespParamType[o.variable.type] + "&";
        result += " ";
        result += "a" + o.name;
    }
    if (result.Length > 0)
    {
        result = ", " + result;
    }
    return result;
}

string CallbackArgs(Method a)
{
    string result = "";
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        if (i.variable.type=="bin.base64")
        {
            result += "(const char*)" + i.name + ".Ptr(), " + i.name + ".Bytes()";
        }
        else if (i.variable.type=="string" || i.variable.type=="uri")
        {
            result += "(const char*)" + i.name + ".Ptr()";
        }
        else
        {
            result += i.name;
        }

    }
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += "&" + o.name;
        if (o.variable.type=="bin.base64")
        {
            result += ", &" + o.name + "Len";
        }
    }
    if (result.Length > 0)
    {
        result = ", " + result;
    }
    return result;
}

string PropertyInArgs(Variable s)
{
    string result = propInArgType[s.type] + " aValue";
    if (s.type == "bin.base64")
    {
        result += ", uint32_t aValueLen";
    }
    return result;
}

string PropertyOutArgs(Variable s)
{
    string result = outArgType[s.type] + "* aValue";
    if (s.type == "bin.base64")
    {
        result += ", uint32_t* aValueLen";
    }
    return result;
}

string DeclareAllowedValues()
{
    return "\n    TChar** allowedValues;\n    TUint index;";
}

string DeclareAllowedValuesForMethod(Method a)
{
    foreach (Argument i in a.inargs)
    {
        if (i.variable.values.Count > 0 && !i.variable.evented)
        {
            return DeclareAllowedValues();
        }
    }
    foreach (Argument o in a.outargs)
    {
        if (o.variable.values.Count > 0 && !o.variable.evented)
        {
            return DeclareAllowedValues();
        }
    }
    return "";
}

string ParameterAllowedValues(Variable v)
{
    string result = "";
    if (v.values.Count > 0)
    {
        result += ", allowedValues, ";
        result += v.values.Count;
    }
    else if (v.minspecified)
    {
        result += ", ";
        result += v.min;
        result += ", ";
        result += v.max;
        if (v.stepspecified)
        {
            result += ", ";
            result += v.step;
        }
    }
    return(result);
}

bool RelatedVariableIsEvented(Argument arg, Document u)
{
    foreach (Variable v in u.evented)
    {
        if (v.name == arg.related)
        {
            return true;
        }
    }
    return false;
}

string TemplateArgument(string aName)
{
    string[] args =  System.Environment.GetCommandLineArgs();
        
    bool isarg = false;
    
    foreach (string arg in args)
    {
        if (isarg)
        {
            string[] parts = arg.Split(new char[] {':'});
            
            if (parts.Length == 2)
            {
                if (parts[0] == aName)
                {
                    return (parts[1]);
                }
            }

            isarg = false;
            continue;
        }
        
        if (arg == "-a")
        {
            isarg = true;
        }
    }
    
    throw (new ArgumentException(aName + " not specified"));
}
#>
