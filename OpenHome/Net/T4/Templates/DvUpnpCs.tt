<#@ assembly name="UpnpServiceXml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OpenHome.Net.Xml.UpnpServiceXml" #>
<#@ template language="C#" #>
<#
    string domain = TemplateArgument("domain");
    string type = TemplateArgument("type");

    uint version = 1;

    try
    {
        version = Convert.ToUInt32(TemplateArgument("version"));
    }
    catch (FormatException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }
    catch (OverflowException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }

    string fileName = "";
    char[] charSeparators = new char[] {'.'};
    string[] res = domain.Split(charSeparators, StringSplitOptions.None);
    foreach (string str in res)
    {
        fileName += str.Substring(0, 1).ToUpper();
        if (str.Length > 1)
        {
            fileName += str.Substring(1, str.Length-1);
        }
    }
    fileName += type;
    fileName += version;
    string className = "DvProvider" + fileName;

    Initialise();

    Document u = new Document(TemplateArgument("xml"));
#>
using System;
using System.Runtime.InteropServices;
using System.Text;
using System.Collections.Generic;
using OpenHome.Net.Core;

namespace OpenHome.Net.Device.Providers
{
    public interface I<#=className#> : IDisposable
    {
<#  foreach (Variable s in u.evented) #>
<#  { #>

        /// <summary>
        /// Set the value of the <#=s.name#> property
        /// </summary>
        /// <param name="aValue">New value for the property</param>
        /// <returns>true if the value has been updated; false if aValue was the same as the previous value</returns>
        bool SetProperty<#=s.name#>(<#=argtype[s.type]#> aValue);

        /// <summary>
        /// Get a copy of the value of the <#=s.name#> property
        /// </summary>
        /// <returns>Value of the <#=s.name#> property.</param>
        <#=argtype[s.type]#> Property<#=s.name#>();
<#  } #>        
    }
    /// <summary>
    /// Provider for the <#=domain#>:<#=type#>:<#=version#> UPnP service
    /// </summary>
    public class <#=className#> : DvProvider, IDisposable, I<#=className#>
    {
        private GCHandle iGch;
<#  foreach (Method a in u.methods) #>
<#  { #>
        private ActionDelegate iDelegate<#=a.name#>;
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
        private <#=propertyType[s.type]#> iProperty<#=s.name#>;
<#  } #>

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="aDevice">Device which owns this provider</param>
        protected <#=className#>(DvDevice aDevice)
            : base(aDevice, "<#=domain#>", "<#=type#>", <#=version#>)
        {
            iGch = GCHandle.Alloc(this);
        }
<#  foreach (Variable s in u.evented) #>
<#  { #>

        /// <summary>
        /// Enable the <#=s.name#> property.
        /// </summary>
        public void EnableProperty<#=s.name#>()
        {
<#      if (s.type == "string" || s.type == "uri") #>
<#      { #>
            List<String> allowedValues = new List<String>();
<#      } #>
<#      if (s.values.Count > 0) #>
<#      { #>
<#          foreach (string val in s.values) #>
<#          { #>
            allowedValues.Add("<#=val#>");
<#          } #>
<#      } #>
            iProperty<#=s.name#> = new <#=propertyType[s.type]#>(new <#=paramType[s.type]#>("<#=s.name#>"<#=ParameterAllowedValues(s)#>));
            AddProperty(iProperty<#=s.name#>);
<#      if (s.values.Count > 0) #>
<#      { #>
            allowedValues.Clear();
<#      } #>
        }
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>

        /// <summary>
        /// Set the value of the <#=s.name#> property
        /// </summary>
        /// <remarks>Can only be called if EnableProperty<#=s.name#> has previously been called.</remarks>
        /// <param name="aValue">New value for the property</param>
        /// <returns>true if the value has been updated; false if aValue was the same as the previous value</returns>
        public bool SetProperty<#=s.name#>(<#=argtype[s.type]#> aValue)
        {
            if (iProperty<#=s.name#> == null)
                throw new PropertyDisabledError();
            return <#=propertySetter[s.type]#>(iProperty<#=s.name#>, aValue);
        }

        /// <summary>
        /// Get a copy of the value of the <#=s.name#> property
        /// </summary>
        /// <remarks>Can only be called if EnableProperty<#=s.name#> has previously been called.</remarks>
        /// <returns>Value of the <#=s.name#> property.</returns>
        public <#=argtype[s.type]#> Property<#=s.name#>()
        {
            if (iProperty<#=s.name#> == null)
                throw new PropertyDisabledError();
            return iProperty<#=s.name#>.Value();
        }
<#  } #>
<#  foreach (Method a in u.methods) #>
<#  { #>

        /// <summary>
        /// Signal that the action <#=a.name#> is supported.
        /// </summary>
        /// <remarks>The action's availability will be published in the device's service.xml.
        /// <#=a.name#> must be overridden if this is called.</remarks>
        protected void EnableAction<#=a.name#>()
        {
            OpenHome.Net.Core.Action action = new OpenHome.Net.Core.Action("<#=a.name#>");<#=DeclareAllowedValuesForMethod(a)#>
<#      foreach (Argument i in a.inargs) #>
<#      { #>
<#          if (RelatedVariableIsEvented(i, u)) #>
<#          { #>
            action.AddInputParameter(new ParameterRelated("<#=i.name#>", iProperty<#=i.variable.name#>));
<#          } #>
<#          else #>
<#          { #>
<#              if (i.variable.values.Count > 0) #>
<#              { #>
<#                  foreach (string val in i.variable.values) #>
<#                  { #>
            allowedValues.Add("<#=val#>");
<#                  } #>
<#              } #>
            action.AddInputParameter(new <#=paramType[i.variable.type]#>("<#=i.name#>"<#=ParameterAllowedValues(i.variable)#>));
<#              if (i.variable.values.Count > 0) #>
<#              { #>
            allowedValues.Clear();
<#              } #>
<#          } #>
<#      } #>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
<#          if (RelatedVariableIsEvented(o, u)) #>
<#          { #>
            action.AddOutputParameter(new ParameterRelated("<#=o.name#>", iProperty<#=o.variable.name#>));
<#          } #>
<#          else #>
<#          { #>
<#              if (o.variable.values.Count > 0) #>
<#              { #>
<#                  foreach (string val in o.variable.values) #>
<#                  { #>
            allowedValues.Add("<#=val#>");
<#                  } #>
<#              } #>
            action.AddOutputParameter(new <#=paramType[o.variable.type]#>("<#=o.name#>"<#=ParameterAllowedValues(o.variable)#>));
<#              if (o.variable.values.Count > 0) #>
<#              { #>
            allowedValues.Clear();
<#              } #>
<#          } #>
<#      } #>
            iDelegate<#=a.name#> = new ActionDelegate(Do<#=a.name#>);
            EnableAction(action, iDelegate<#=a.name#>, GCHandle.ToIntPtr(iGch));
        }
<#  } #>
<#  foreach (Method a in u.methods) #>
<#  { #>

        /// <summary>
        /// <#=a.name#> action.
        /// </summary>
        /// <remarks>Will be called when the device stack receives an invocation of the
        /// <#=a.name#> action for the owning device.
        ///
        /// Must be implemented iff EnableAction<#=a.name#> was called.</remarks>
        /// <param name="aInvocation">Interface allowing querying of aspects of this particular action invocation.</param>
<#      foreach (Argument i in a.inargs) #>
<#      { #>
        /// <param name="a<#=i.name#>"></param>
<#      } #>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
        /// <param name="a<#=o.name#>"></param>
<#      } #>
        protected virtual void <#=a.name#>(IDvInvocation aInvocation<#=ArgsFull(a)#>)
        {
            throw (new ActionDisabledError());
        }
<#  } #>
<#  foreach (Method a in u.methods) #>
<#  { #>

        private static int Do<#=a.name#>(IntPtr aPtr, IntPtr aInvocation)
        {
            GCHandle gch = GCHandle.FromIntPtr(aPtr);
            <#=className#> self = (<#=className#>)gch.Target;
            DvInvocation invocation = new DvInvocation(aInvocation);
<#      foreach (Argument i in a.inargs) #>
<#      { #>
            <#=argtype[i.variable.type]#> <#=ArgNameLocal(i.name)#>;
<#      } #>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
            <#=argtype[o.variable.type]#> <#=ArgNameLocal(o.name)#>;
<#      } #>
            try
            {
                invocation.ReadStart();
<#      foreach (Argument i in a.inargs) #>
<#      { #>
                <#=ArgNameLocal(i.name)#> = invocation.<#=invocationReader[i.variable.type]#>("<#=i.name#>");
<#      } #>
                invocation.ReadEnd();
                self.<#=a.name#>(invocation<#=ArgNames(a)#>);
            }
            catch (ActionError e)
            {
                invocation.ReportActionError(e, "<#=a.name#>");
                return -1;
            }
            catch (PropertyUpdateError)
            {
                invocation.ReportError(501, String.Format("Invalid value for property {0}", "<#=a.name#>"));
                return -1;
            }
            catch (Exception e)
            {
                Console.WriteLine("WARNING: unexpected exception {0}(\"{1}\") thrown by {2} in {3}", e.GetType(), e.Message, "<#=a.name#>", e.TargetSite.Name);
                Console.WriteLine("         Only ActionError or PropertyUpdateError should be thrown by actions");
                return -1;
            }
            try
            {
                invocation.WriteStart();
<#      foreach (Argument o in a.outargs) #>
<#      { #>
                invocation.<#=invocationWriter[o.variable.type]#>("<#=o.name#>", <#=ArgNameLocal(o.name)#>);
<#      } #>
                invocation.WriteEnd();
            }
            catch (ActionError)
            {
                return -1;
            }
            catch (System.Exception e)
            {
                Console.WriteLine("ERROR: unexpected exception {0}(\"{1}\") thrown by {2} in {3}", e.GetType(), e.Message, "<#=a.name#>", e.TargetSite.Name);
                Console.WriteLine("       Only ActionError can be thrown by action response writer");
            }
            return 0;
        }
<#  } #>

        /// <summary>
        /// Must be called for each class instance.  Must be called before Core.Library.Close().
        /// </summary>
        public virtual void Dispose()
        {
            if (DisposeProvider())
                iGch.Free();
        }
    }
}

<#+

Dictionary<string,string> argtype = new Dictionary<string,string>();
Dictionary<string,string> paramType = new Dictionary<string,string>();
Dictionary<string,string> propertyType = new Dictionary<string,string>();
Dictionary<string,string> propertySetter = new Dictionary<string,string>();
Dictionary<string,string> invocationReader = new Dictionary<string,string>();
Dictionary<string,string> invocationWriter = new Dictionary<string,string>();

void Initialise()
{
    argtype.Add("ui1", "uint");
    argtype.Add("ui2", "uint");
    argtype.Add("ui4", "uint");
    argtype.Add("boolean", "bool");
    argtype.Add("i1", "int");
    argtype.Add("i2", "int");
    argtype.Add("i4", "int");
    argtype.Add("string", "string");
    argtype.Add("bin.base64", "byte[]");
    argtype.Add("uri", "string");

    paramType.Add("ui1", "ParameterUint");
    paramType.Add("ui2", "ParameterUint");
    paramType.Add("ui4", "ParameterUint");
    paramType.Add("boolean", "ParameterBool");
    paramType.Add("i1", "ParameterInt");
    paramType.Add("i2", "ParameterInt");
    paramType.Add("i4", "ParameterInt");
    paramType.Add("string", "ParameterString");
    paramType.Add("bin.base64", "ParameterBinary");
    paramType.Add("uri", "ParameterString");

    propertyType.Add("ui1", "PropertyUint");
    propertyType.Add("ui2", "PropertyUint");
    propertyType.Add("ui4", "PropertyUint");
    propertyType.Add("boolean", "PropertyBool");
    propertyType.Add("i1", "PropertyInt");
    propertyType.Add("i2", "PropertyInt");
    propertyType.Add("i4", "PropertyInt");
    propertyType.Add("string", "PropertyString");
    propertyType.Add("bin.base64", "PropertyBinary");
    propertyType.Add("uri", "PropertyString");

    propertySetter.Add("ui1", "SetPropertyUint");
    propertySetter.Add("ui2", "SetPropertyUint");
    propertySetter.Add("ui4", "SetPropertyUint");
    propertySetter.Add("boolean", "SetPropertyBool");
    propertySetter.Add("i1", "SetPropertyInt");
    propertySetter.Add("i2", "SetPropertyInt");
    propertySetter.Add("i4", "SetPropertyInt");
    propertySetter.Add("string", "SetPropertyString");
    propertySetter.Add("bin.base64", "SetPropertyBinary");
    propertySetter.Add("uri", "SetPropertyString");

    invocationReader.Add("ui1", "ReadUint");
    invocationReader.Add("ui2", "ReadUint");
    invocationReader.Add("ui4", "ReadUint");
    invocationReader.Add("boolean", "ReadBool");
    invocationReader.Add("i1", "ReadInt");
    invocationReader.Add("i2", "ReadInt");
    invocationReader.Add("i4", "ReadInt");
    invocationReader.Add("string", "ReadString");
    invocationReader.Add("bin.base64", "ReadBinary");
    invocationReader.Add("uri", "ReadString");

    invocationWriter.Add("ui1", "WriteUint");
    invocationWriter.Add("ui2", "WriteUint");
    invocationWriter.Add("ui4", "WriteUint");
    invocationWriter.Add("boolean", "WriteBool");
    invocationWriter.Add("i1", "WriteInt");
    invocationWriter.Add("i2", "WriteInt");
    invocationWriter.Add("i4", "WriteInt");
    invocationWriter.Add("string", "WriteString");
    invocationWriter.Add("bin.base64", "WriteBinary");
    invocationWriter.Add("uri", "WriteString");
}

string DeclareAllowedValues()
{
    return "\n            List<String> allowedValues = new List<String>();";
}

string DeclareAllowedValuesForMethod(Method a)
{
    foreach (Argument i in a.inargs)
    {
        if (!i.variable.evented && (i.variable.type == "string" || i.variable.type == "uri"))
        {
            return DeclareAllowedValues();
        }
    }
    foreach (Argument o in a.outargs)
    {
        if (!o.variable.evented && (o.variable.type == "string" || o.variable.type == "uri"))
        {
            return DeclareAllowedValues();
        }
    }
    return "";
}

string ParameterAllowedValues(Variable v)
{
    string result = "";
    if (v.type == "string" || v.type == "uri")
    {
        result += ", allowedValues";
    }
    else if (v.minspecified)
    {
        result += ", ";
        result += v.min;
        if (v.maxspecified)
        {
            result += ", ";
            result += v.max;
        }
        else if (v.stepspecified)
        {
            // choose an arbitrary, large value since we can only specify a step if we have both min and max
            result += ", ";
            result += Int32.MaxValue;
        }
        if (v.stepspecified)
        {
            result += ", ";
            result += v.step;
        }
    }
    return(result);
}

string InArgsFull(Method a)
{
    string result = "";
    
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += argtype[i.variable.type];
        result += " ";
        result += "a" + i.name;
    }
    
    return result;
} 

string OutArgsFull(Method a)
{
    string result = "";
    
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += "out ";
        result += argtype[o.variable.type];
        result += " ";
        result += "a" + o.name;
    }
    
    return result;
}

string ArgsFull(Method a)
{
    string result = InArgsFull(a);
    string outArgs = OutArgsFull(a);
    if (outArgs.Length > 0)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += outArgs;
    }
    if (result.Length > 0)
    {
        result = ", " + result;
    }
    return result;
}

string ArgNameLocal(string aName)
{
    string name = aName.Substring(0, 1).ToLower();
    if (aName.Length > 1)
    {
        name += aName.Substring(1, aName.Length-1);
    }
    return name;
}

string ArgNames(Method a)
{
    string result = "";
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += ArgNameLocal(i.name);
    }
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += "out " + ArgNameLocal(o.name);
    }
    if (result.Length > 0)
    {
        result = ", " + result;
    }
    return result;
}

bool RelatedVariableIsEvented(Argument arg, Document u)
{
    foreach (Variable v in u.evented)
    {
        if (v.name == arg.related)
        {
            return true;
        }
    }
    return false;
}

string TemplateArgument(string aName)
{
    string[] args =  System.Environment.GetCommandLineArgs();
        
    bool isarg = false;
    
    foreach (string arg in args)
    {
        if (isarg)
        {
            string[] parts = arg.Split(new char[] {':'});
            
            if (parts.Length == 2)
            {
                if (parts[0] == aName)
                {
                    return (parts[1]);
                }
            }
            
            isarg = false;
            continue;
        }
        
        if (arg == "-a")
        {
            isarg = true;
        }
    }
    
    throw (new ArgumentException(aName + " not specified"));
}
#>
