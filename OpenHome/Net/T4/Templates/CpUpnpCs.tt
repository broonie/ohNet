<#@ assembly name="UpnpServiceXml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OpenHome.Net.Xml.UpnpServiceXml" #>
<#@ template language="C#" #>
<#
    string domain = TemplateArgument("domain");
    string type = TemplateArgument("type");

    uint version = 1;

    try
    {
       version = Convert.ToUInt32(TemplateArgument("version"));
    }
    catch (FormatException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }
    catch (OverflowException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }

    string upnpdomain = domain.Replace(".", "-");

    if (upnpdomain.StartsWith("upnp-"))
    {
        upnpdomain = "schemas-" + upnpdomain;
    }

    string fileName = "";
    char[] charSeparators = new char[] {'.'};
    string[] res = domain.Split(charSeparators, StringSplitOptions.None);
    foreach (string str in res)
    {
        fileName += str.Substring(0, 1).ToUpper();
        if (str.Length > 1)
        {
            fileName += str.Substring(1, str.Length-1);
        }
    }
    fileName += type;
    fileName += version;
    string className = "CpProxy" + fileName;

    Initialise();

    Document u = new Document(TemplateArgument("xml"));
#>
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using OpenHome.Net.Core;
using OpenHome.Net.ControlPoint;

namespace OpenHome.Net.ControlPoint.Proxies
{
    public interface I<#=className#> : ICpProxy, IDisposable
    {
<#  foreach (Method a in u.methods) #>
<#  { #>
        void Sync<#=a.name#>(<#=ArgsFull(a)#>);
        void Begin<#=a.name#>(<#=InArgsFull(a, true)#>CpProxy.CallbackAsyncComplete aCallback);
        void End<#=a.name#>(<#=Handle#> aAsyncHandle<#=OutArgsFull(a, true)#>);
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
        void SetProperty<#=s.name#>Changed(System.Action a<#=s.name#>Changed);
        <#=argtype[s.type]#> Property<#=s.name#>();
<#  } #>
    }
<#  foreach (Method a in u.methods) #>
<#  { #>

    internal class Sync<#=a.name#><#=fileName#> : SyncProxyAction
    {
        private <#=className#> iService;
<#      foreach (Argument o in a.outargs) #>
<#      { #>
        private <#=argtype[o.variable.type]#> i<#=ArgName(o)#>;
<#      } #>

        public Sync<#=a.name#><#=fileName#>(<#=className#> aProxy)
        {
            iService = aProxy;
        }
<#      foreach (Argument o in a.outargs) #>
<#      { #>
        public <#=argtype[o.variable.type]#> <#=ArgName(o)#>()
        {
            return i<#=ArgName(o)#>;
        }
<#      } #>
        protected override void CompleteRequest(IntPtr aAsyncHandle)
        {
            iService.End<#=a.name#>(aAsyncHandle<#=CompleteRequestOutArgs(a)#>);
        }
    };
<#  } #>

    /// <summary>
    /// Proxy for the <#=domain#>:<#=type#>:<#=version#> UPnP service
    /// </summary>
    public class <#=className#> : CpProxy, IDisposable, I<#=className#>
    {
<#  foreach (Method a in u.methods) #>
<#  { #>
        private OpenHome.Net.Core.Action iAction<#=a.name#>;
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
        private <#=propertyType[s.type]#> i<#=s.name#>;
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
        private System.Action i<#=s.name#>Changed;
<#  } #>
<#  if (u.evented.Count > 0) #>
<#  { #>
        private Mutex iPropertyLock;
<#  } #>

        /// <summary>
        /// Constructor
        /// </summary>
        /// <remarks>Use CpProxy::[Un]Subscribe() to enable/disable querying of state variable and reporting of their changes.</remarks>
        /// <param name="aDevice">The device to use</param>
        public <#=className#>(CpDevice aDevice)
            : base("<#=upnpdomain#>", "<#=type#>", <#=version#>, aDevice)
        {
<#  if (u.methods.Count > 0) #>
<#  { #>
            <#=DeclareCtorLocalVars(u)#>
<#      foreach (Method a in u.methods) #>
<#      { #>

            iAction<#=a.name#> = new OpenHome.Net.Core.Action("<#=a.name#>");
<#          foreach (Argument i in a.inargs) #>
<#          { #>
<#              if (i.variable.values.Count > 0) #>
<#              { #>
<#                  foreach (string val in i.variable.values) #>
<#                  { #>
            allowedValues.Add("<#=val#>");
<#                  } #>
<#              } #>
            param = new <#=paramType[i.variable.type]#>("<#=i.name#>"<#=ParameterAllowedValues(i)#>);
            iAction<#=a.name#>.AddInputParameter(param);
<#              if (i.variable.values.Count > 0) #>
<#              { #>
            allowedValues.Clear();
<#              } #>
<#          } #>
<#          foreach (Argument o in a.outargs) #>
<#          { #>
<#              if (o.variable.values.Count > 0) #>
<#              { #>
<#                  foreach (string val in o.variable.values) #>
<#                  { #>
            allowedValues.Add("<#=val#>");
<#                  } #>
<#              } #>
            param = new <#=paramType[o.variable.type]#>("<#=o.name#>"<#=ParameterAllowedValues(o)#>);
            iAction<#=a.name#>.AddOutputParameter(param);
<#              if (o.variable.values.Count > 0) #>
<#              { #>
            allowedValues.Clear();
<#              } #>
<#          } #>
<#      } #>
<#  } #>
<#  if (u.evented.Count > 0) #>
<#  { #>

<#      foreach (Variable s in u.evented) #>
<#      { #>
            i<#=s.name#> = new <#=propertyType[s.type]#>("<#=s.name#>", <#=s.name#>PropertyChanged);
            AddProperty(i<#=s.name#>);
<#      } #>
<#  } #>
<#  if (u.evented.Count > 0) #>
<#  { #>
            
            iPropertyLock = new Mutex();
<#  } #>
        }
<#  foreach (Method a in u.methods) #>
<#  { #>

        /// <summary>
        /// Invoke the action synchronously
        /// </summary>
        /// <remarks>Blocks until the action has been processed
        /// on the device and sets any output arguments</remarks>
<#      foreach (Argument i in a.inargs) #>
<#      { #>
        /// <param name="a<#=ArgName(i)#>"></param>
<#      } #>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
        /// <param name="a<#=ArgName(o)#>"></param>
<#      } #>
        public void Sync<#=a.name#>(<#=ArgsFull(a)#>)
        {
            Sync<#=a.name#><#=fileName#> sync = new Sync<#=a.name#><#=fileName#>(this);
            Begin<#=a.name#>(<#=InArgsNames(a, true)#>sync.AsyncComplete());
            sync.Wait();
            sync.ReportError();
<#          foreach (Argument o in a.outargs) #>
<#          { #>
            a<#=ArgName(o)#> = sync.<#=ArgName(o)#>();
<#          } #>
        }

        /// <summary>
        /// Invoke the action asynchronously
        /// </summary>
        /// <remarks>Returns immediately and will run the client-specified callback when the action
        /// later completes.  Any output arguments can then be retrieved by calling
        /// End<#=a.name#>().</remarks>
<#      foreach (Argument i in a.inargs) #>
<#      { #>
        /// <param name="a<#=ArgName(i)#>"></param>
<#      } #>
        /// <param name="aCallback">Delegate to run when the action completes.
        /// This is guaranteed to be run but may indicate an error</param>
        public void Begin<#=a.name#>(<#=InArgsFull(a, true)#>CallbackAsyncComplete aCallback)
        {
            Invocation invocation = iService.Invocation(iAction<#=a.name#>, aCallback);
<#      if (a.inargs.Count > 0) #>
<#      { #>
            int inIndex = 0;
<#          foreach (Argument i in a.inargs) #>
<#          { #>
            invocation.AddInput(new <#=invArgType[i.variable.type]#>((<#=paramType[i.variable.type]#>)iAction<#=a.name#>.InputParameter(inIndex++), a<#=ArgName(i)#>));
<#          } #>
<#      } #>
<#      if (a.outargs.Count > 0) #>
<#      { #>
            int outIndex = 0;
<#          foreach (Argument o in a.outargs) #>
<#          { #>
            invocation.AddOutput(new <#=invArgType[o.variable.type]#>((<#=paramType[o.variable.type]#>)iAction<#=a.name#>.OutputParameter(outIndex++)));
<#          } #>
<#      } #>
            iService.InvokeAction(invocation);
        }

        /// <summary>
        /// Retrieve the output arguments from an asynchronously invoked action.
        /// </summary>
        /// <remarks>This may only be called from the callback set in the above Begin function.</remarks>
        /// <param name="aAsyncHandle">Argument passed to the delegate set in the above Begin function</param>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
        /// <param name="a<#=ArgName(o)#>"></param>
<#      } #>
        public void End<#=a.name#>(IntPtr aAsyncHandle<#=OutArgsFull(a, true)#>)
        {
			uint code;
			string desc;
            if (Invocation.Error(aAsyncHandle, out code, out desc))
            {
                throw new ProxyError(code, desc);
            }
<#      if (a.outargs.Count > 0) #>
<#      { #>
            uint index = 0;
<#          foreach (Argument o in a.outargs) #>
<#          { #>
            a<#=ArgName(o)#> = Invocation.<#=invOutputType[o.variable.type]#>(aAsyncHandle, index++);
<#          } #>
<#      } #>
        }
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>

        /// <summary>
        /// Set a delegate to be run when the <#=s.name#> state variable changes.
        /// </summary>
        /// <remarks>Callbacks may be run in different threads but callbacks for a
        /// <#=className#> instance will not overlap.</remarks>
        /// <param name="a<#=s.name#>Changed">The delegate to run when the state variable changes</param>
        public void SetProperty<#=s.name#>Changed(System.Action a<#=s.name#>Changed)
        {
            lock (iPropertyLock)
            {
                i<#=s.name#>Changed = a<#=s.name#>Changed;
            }
        }

        private void <#=s.name#>PropertyChanged()
        {
            lock (iPropertyLock)
            {
                ReportEvent(i<#=s.name#>Changed);
            }
        }
<#  } #>

<#  foreach (Variable s in u.evented) #>
<#  { #>
        /// <summary>
        /// Query the value of the <#=s.name#> property.
        /// </summary>
        /// <remarks>This function is threadsafe and can only be called if Subscribe() has been
        /// called and a first eventing callback received more recently than any call
        /// to Unsubscribe().</remarks>
        /// <returns>Value of the <#=s.name#> property</returns>
        public <#=argtype[s.type]#> Property<#=s.name#>()
        {
            PropertyReadLock();
            <#=argtype[s.type]#> val = i<#=s.name#>.Value();
            PropertyReadUnlock();
            return val;
        }

<#  } #>
        /// <summary>
        /// Must be called for each class instance.  Must be called before Core.Library.Close().
        /// </summary>
        public void Dispose()
        {
            lock (this)
            {
                if (iHandle == IntPtr.Zero)
                    return;
                DisposeProxy();
                iHandle = IntPtr.Zero;
            }
<#  foreach (Method a in u.methods) #>
<#  { #>
            iAction<#=a.name#>.Dispose();
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
            i<#=s.name#>.Dispose();
<#  } #>
        }
    }
}

<#+

const string Handle = "IntPtr";

Dictionary<string,string> argtype = new Dictionary<string,string>();
Dictionary<string,string> paramType = new Dictionary<string,string>();
Dictionary<string,string> propertyType = new Dictionary<string,string>();
Dictionary<string,string> invArgType = new Dictionary<string,string>();
Dictionary<string,string> invOutputType = new Dictionary<string,string>();

void Initialise()
{
    argtype.Add("ui1", "uint");
    argtype.Add("ui2", "uint");
    argtype.Add("ui4", "uint");
    argtype.Add("boolean", "bool");
    argtype.Add("i1", "int");
    argtype.Add("i2", "int");
    argtype.Add("i4", "int");
    argtype.Add("string", "String");
    argtype.Add("bin.base64", "byte[]");
    argtype.Add("uri", "String");

    paramType.Add("ui1", "ParameterUint");
    paramType.Add("ui2", "ParameterUint");
    paramType.Add("ui4", "ParameterUint");
    paramType.Add("boolean", "ParameterBool");
    paramType.Add("i1", "ParameterInt");
    paramType.Add("i2", "ParameterInt");
    paramType.Add("i4", "ParameterInt");
    paramType.Add("string", "ParameterString");
    paramType.Add("bin.base64", "ParameterBinary");
    paramType.Add("uri", "ParameterString");

    propertyType.Add("ui1", "PropertyUint");
    propertyType.Add("ui2", "PropertyUint");
    propertyType.Add("ui4", "PropertyUint");
    propertyType.Add("boolean", "PropertyBool");
    propertyType.Add("i1", "PropertyInt");
    propertyType.Add("i2", "PropertyInt");
    propertyType.Add("i4", "PropertyInt");
    propertyType.Add("string", "PropertyString");
    propertyType.Add("bin.base64", "PropertyBinary");
    propertyType.Add("uri", "PropertyString");

    invArgType.Add("ui1", "ArgumentUint");
    invArgType.Add("ui2", "ArgumentUint");
    invArgType.Add("ui4", "ArgumentUint");
    invArgType.Add("boolean", "ArgumentBool");
    invArgType.Add("i1", "ArgumentInt");
    invArgType.Add("i2", "ArgumentInt");
    invArgType.Add("i4", "ArgumentInt");
    invArgType.Add("string", "ArgumentString");
    invArgType.Add("bin.base64", "ArgumentBinary");
    invArgType.Add("uri", "ArgumentString");

    invOutputType.Add("ui1", "OutputUint");
    invOutputType.Add("ui2", "OutputUint");
    invOutputType.Add("ui4", "OutputUint");
    invOutputType.Add("boolean", "OutputBool");
    invOutputType.Add("i1", "OutputInt");
    invOutputType.Add("i2", "OutputInt");
    invOutputType.Add("i4", "OutputInt");
    invOutputType.Add("string", "OutputString");
    invOutputType.Add("bin.base64", "OutputBinary");
    invOutputType.Add("uri", "OutputString");
}

string InArgsFull(Method a, bool aTrailingComma)
{
    string result = "";
    
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += argtype[i.variable.type];
        result += " ";
        result += "a" + ArgName(i);
    }
    if (aTrailingComma && result.Length > 0)
    {
        result += ", ";
    }
    
    return result;
} 

string OutArgsFull(Method a, bool aLeadingComma)
{
    string result = "";
    
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += "out ";
        result += argtype[o.variable.type];
        result += " ";
        result += "a" + ArgName(o);
    }
    if (aLeadingComma && result.Length > 0)
    {
        result = ", " + result;
    }
    
    return result;
}

string ArgsFull(Method a)
{
    string result = InArgsFull(a, false);
    string outArgs = OutArgsFull(a, false);
    if (outArgs.Length > 0)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += outArgs;
    }
    return result;
}

string ArgNameLocal(string aName)
{
    string name = aName.Substring(0, 1).ToLower();
    if (aName.Length > 1)
    {
        name += aName.Substring(1, aName.Length-1);
    }
    return name;
}

string InArgsNames(Method a, bool aTrailingComma)
{
    string result = "";
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += "a" + ArgName(i);
    }
    if (aTrailingComma && result.Length > 0)
    {
        result += ", ";
    }
    return result;
}

string DeclareCtorLocalVars(Document u)
{
    bool hasParameters = false;
    bool hasAllowedValues = false;

    foreach (Method a in u.methods)
    {
        foreach (Argument i in a.inargs)
        {
            hasParameters = true;
            if (i.variable.type == "string" || i.variable.type == "uri")
            {
                hasAllowedValues = true;
            }
        }
        foreach (Argument o in a.outargs)
        {
            hasParameters = true;
            if (o.variable.type == "string" || o.variable.type == "uri")
            {
                hasAllowedValues = true;
            }
        }
    }

    string parameterDeclaration =
        hasParameters ?
        "OpenHome.Net.Core.Parameter param;" :
        "";
    string allowedValuesDeclaration = 
        hasAllowedValues ?
        "List<String> allowedValues = new List<String>();":
        "";
    return parameterDeclaration + "\n            " + allowedValuesDeclaration;
}

string ParameterAllowedValues(Argument a)
{
    string result = "";
    Variable v = a.variable;
    if (v.type == "string" || v.type == "uri")
    {
        result += ", allowedValues";
    }
    else if (v.minspecified)
    {
        result += ", ";
        result += v.min;
        result += ", ";
        if (v.maxspecified)
        {
            result += v.max;
        }
        else
        {
            result += int.MaxValue;
        }
        if (v.stepspecified)
        {
            result += ", ";
            result += v.step;
        }
    }
    return(result);
}

string CompleteRequestOutArgs(Method a)
{
    string result = "";
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += "out i" + ArgName(o);
    }
    if (result.Length > 0)
    {
        result = ", " + result;
    }
    return result;
}

string OutArgsNames(Method a, bool aLeadingComma, string aPrefix)
{
    string result = "";
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += aPrefix + ArgName(o);
    }
    if (aLeadingComma && result.Length > 0)
    {
        result = ", " + result;
    }
    return result;
}

string ArgsNames(Method a)
{
    string inStr = InArgsNames(a, false);
    string outStr = OutArgsNames(a, false, "a");
    if (outStr.Length > 0)
    {
        outStr = ", " + outStr;
    }
    if (inStr.Length > 0)
    {
        inStr = ", " + inStr;
    }
    string result = inStr + outStr;
    return result;
}

string ArgName(Argument aArg)
{
    string name = aArg.name;
    if (name.Substring(0, 1) == "a")
    {
        name = name.Substring(1);
    }
    string start = name.Substring(0, 1);
    string end = name.Substring(1);
    string ret = start.ToUpper() + end;
    return ret;
}

string TemplateArgument(string aName)
{
    string[] args =  System.Environment.GetCommandLineArgs();
        
    bool isarg = false;
    
    foreach (string arg in args)
    {
        if (isarg)
        {
            string[] parts = arg.Split(new char[] {':'});
            
            if (parts.Length == 2)
            {
                if (parts[0] == aName)
                {
                    return (parts[1]);
                }
            }
            
            isarg = false;
            continue;
        }
        
        if (arg == "-a")
        {
            isarg = true;
        }
    }
    
    throw (new ArgumentException(aName + " not specified"));
}
#>
